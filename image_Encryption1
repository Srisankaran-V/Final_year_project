import numpy as np
from PIL import Image
import secrets

# Define your helper functions here
# Define chaotic map functions F, G, H, I
def F(a, b, c, d):
    return ((a & b) | ((~a) & c)) + d % 256

def G(a, b, c, d):
    return ((a & c) | (b & (~c))) + d % 256

def H(a, b, c, d):
    return (a ^ b ^ c) + d % 256

def I(a, b, c, d):
    return ((b ^ (a | (~c))) + d) % 256
def cycL(x, y):
    """Perform x-bit left cyclic shift on the binary sequence y."""
    return ((y << x) | (y >> (8 - x))) & 0xFF  # Assuming 8-bit sequences

def LSB3(x):
    """Return the value of the three least significant bits of x."""
    return x & 0x07  # Extract the three least significant bits

# Function to apply the chaotic map (tent map)
def chaotic_map(x, b):
    if x <= b:
        return x / b
    else:
        return (1 - x) / (1 - b)


# Function to iterate the NCML once and extract 16 bits from each lattice value

def iterate_NCML(N, epsilon, b):
    lattice = np.random.rand(N)
    new_lattice = np.zeros(N)
    for i in range(N):
        new_lattice[i] = (1 - epsilon) * chaotic_map(lattice[i], b) + epsilon * chaotic_map(lattice[(i + 1) % N], b)
    return new_lattice

# AES S-box implementation
def AES_S_box(num):
    S_box = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
        0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
        0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
        0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
        0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
        0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
        0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
        0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
        0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
        0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
        0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
        0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
        0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
        0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
        0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
        0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
        0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]
    return S_box[num]


# Function to generate pseudorandom numbers using NCML with AES S-box substitution
def generate_pseudorandom_numbers(N, epsilon, b, iterations, numbers_to_generate):
    pseudorandom_numbers = []

    for _ in range(iterations):
        lattice = np.random.rand(N)

        for _ in range(numbers_to_generate // 4):
            for i in range(0, N, 4):
                A = lattice[i:i+4]
                A_int = [int(a * 255) for a in A]  # Convert values to integers
                numbers = [F(A_int[0], A_int[1], A_int[2], A_int[3]), 
                           G(A_int[1], A_int[2], A_int[3], A_int[0]), 
                           H(A_int[2], A_int[3], A_int[0], A_int[1]), 
                           I(A_int[3], A_int[0], A_int[1], A_int[2])]
                # Apply AES S-box substitution directly
                substituted_numbers = [AES_S_box(num % 256) for num in numbers]
                pseudorandom_numbers.extend(substituted_numbers)

            # Step 3: Update lattice values for the next iteration
            lattice = np.roll(lattice, -1)

    return pseudorandom_numbers[:numbers_to_generate]




# def encrypt_image(image_path, key):
#     # Load image
#     img = Image.open(image_path)
#     width, height = img.size

#     # Step 1: Adjust image size
#     num_blocks = (width * height) // 64
#     kL = sum(key) * num_blocks // 256
#     r = sum(key[8:]) % (height * width)
#     # Adjust image size if needed

#     # Step 2: Set initial value of NCML
#     N0 = 100  # Constant
#     x0 = [(key[i] + 0.1) / 256 for i in range(8)]
#     ncml_state = iterate_NCML(8, 0.05, 0.4999)
#     for _ in range(N0):
#         ncml_state = iterate_NCML(8, 0.05, 0.4999)

#     # Step 3: Rearrange image pixels into blocks
#     block_pixels = []
#     pixels = list(img.getdata())
#     for i in range(0, len(pixels), 64):
#         block_pixels.append(pixels[i:i+64])

#     # Step 4: Diffusion and permutation operations
#     block_positions = [None] * num_blocks  # Initialize list to store block positions
#     for block in block_pixels:
#         # (i) Generate pseudorandom numbers
#         pseudorandom_numbers = generate_pseudorandom_numbers(8, 0.05, 0.4999, 1, 64)

#         # (ii) Change pixel values in block
#         new_block = []
#         C_k_prev_row = [key[j + 8] for j in range(8)]  # Initialize previous row values with key

#         for i in range(8):
#             for j in range(8):
#                 B_k_ij = block[i * 8 + j]
#                 rand_num = pseudorandom_numbers[i * 8 + j]

#                 # Apply the equation to change pixel values
#                 C_k_ij = (cycL((B_k_ij ^ rand_num + C_k_prev_row[j]) % G, LSB3(C_k_prev_row[(j - 1) % 8] ^ rand_num)))

#                 new_block.append(C_k_ij)
#                 C_k_prev_row[j] = C_k_ij  # Update previous row value

#         # Step 4: Change position of block and exchange lattice values of NCML
#         for k in range(len(block_pixels)):
#             # Calculate new position knew
#             knew = int(ncml_state[0] * num_blocks)
            
#             # If knew is occupied, find the next unoccupied position
#             while block_positions[knew] is not None:
#                 knew = (knew + 1) % num_blocks

#             # If the processing block is the last one, move it directly to position kL
#             if k == len(block_pixels) - 1:
#                 knew = kL

#             # Move the block to the new position
#             block_positions[knew] = block_pixels[k]

#             # Exchange lattice values of NCML
#             d = LSB3(C[7][0])
#             for i in range(8):
#                 if C[7][i] > C[7][(i + d) % 8]:
#                     # Exchange lattice values x(i) and x((i + d) mod 8)
#                     ncml_state[i], ncml_state[(i + d) % 8] = ncml_state[(i + d) % 8], ncml_state[i]

#         # Repeat the encryption process for R rounds
#         # Save encrypted image
#         # Replace original block with modified block
#         block[:] = new_block

#     # Step 5: Repeat for R rounds

#     # Save encrypted image

# # You need to implement the helper functions (iterate_NCML, generate_pseudorandom_numbers, cycL, LSB3) and the encryption logic (F, G, H, I) if not implemented already.
def encrypt_image(image_path, key, R):
    # Load image
    img = Image.open(image_path)
    width, height = img.size

    # Step 1: Adjust image size
    num_blocks = (width * height) // 64
    kL = sum(key) * num_blocks // 256
    r = sum(key[8:]) % (height * width)
    # Adjust image size if needed

    # Step 2: Set initial value of NCML
    N0 = 100  # Constant
    x0 = [(key[i] + 0.1) / 256 for i in range(8)]
    ncml_state = iterate_NCML(8, 0.05, 0.4999)
    for _ in range(N0):
        ncml_state = iterate_NCML(8, 0.05, 0.4999)

    # Step 3: Rearrange image pixels into blocks
    block_pixels = []
    pixels = list(img.getdata())
    for i in range(0, len(pixels), 64):
        block_pixels.append(pixels[i:i + 64])

    # Step 4: Diffusion and permutation operations
    block_positions = [None] * num_blocks  # Initialize list to store block positions
    for _ in range(R):  # Repeat for R rounds
        for block in block_pixels:
            # (i) Generate pseudorandom numbers
            pseudorandom_numbers = generate_pseudorandom_numbers(8, 0.05, 0.4999, 1, 64)

            #(ii) Change pixel values in block
            new_block = []
            C_k_prev_row = [key[j + 8] for j in range(8)]  # Initialize previous row values with key

            for i in range(8):
                for j in range(8):
                    B_k_ij = block[i * 8 + j]
                    rand_num = pseudorandom_numbers[i * 8 + j]
                    print("B_K_ij : ", B_k_ij)

                    # Apply the equation to change pixel values
                    #C_k_ij = (cycL((B_k_ij ^ rand_num + C_k_prev_row[j]) % 256, LSB3(C_k_prev_row[(j - 1) % 8] ^ rand_num)))

                    C_k_ij = (cycL((B_k_ij ^ rand_num + C_k_prev_row[j]) % 256, LSB3(C_k_prev_row[(j - 1) % 8] ^ rand_num)))

                    new_block.append(C_k_ij)
                    C_k_prev_row[j] = C_k_ij  # Update previous row value
                            # (ii) Change pixel values in block
            # new_block = []
            # C_k_prev_row = [key[j + 8] for j in range(8)]  # Initialize previous row values with key

            # for i in range(8):
            #     for j in range(8):
            #         B_k_ij = block[i][j]  # Updated line
            #         rand_num = pseudorandom_numbers[i * 8 + j]

            #         # Apply the equation to change pixel values
            #         C_k_ij = (cycL((B_k_ij ^ rand_num + C_k_prev_row[j]) % 256, LSB3(C_k_prev_row[(j - 1) % 8] ^ rand_num)))

            #         new_block.append(C_k_ij)
            #         C_k_prev_row[j] = C_k_ij  # Update previous row value

            # Step 4: Change position of block and exchange lattice values of NCML
            for k in range(len(block_pixels)):
                # Calculate new position knew
                knew = int(ncml_state[0] * num_blocks)

                # If knew is occupied, find the next unoccupied position
                while block_positions[knew] is not None:
                    knew = (knew + 1) % num_blocks

                # If the processing block is the last one, move it directly to position kL
                if k == len(block_pixels) - 1:
                    knew = kL

                # Move the block to the new position
                block_positions[knew] = block_pixels[k]

                # Exchange lattice values of NCML
                d = LSB3(C_k_prev_row[7])
                for i in range(8):
                    if C_k_prev_row[i] > C_k_prev_row[(i + d) % 8]:
                        # Exchange lattice values x(i) and x((i + d) mod 8)
                        ncml_state[i], ncml_state[(i + d) % 8] = ncml_state[(i + d) % 8], ncml_state[i]

            # Replace original block with modified block
            block[:] = new_block

        # Save encrypted image after each round
        encrypted_img_path = f"encrypted_round_{round + 1}.png"
        save_image(block_pixels, width, height, encrypted_img_path)

    print("Encryption completed.")

def save_image(blocks, width, height, file_path):
    # Flatten blocks
    pixels = [pixel for block in blocks for pixel in block]

    # Create image from pixels
    encrypted_img = Image.new("L", (width, height))
    encrypted_img.putdata(pixels)

    # Save image
    encrypted_img.save(file_path)

# You need to implement the helper functions (iterate_NCML, generate_pseudorandom_numbers, cycL, LSB3) and the encryption logic (F, G, H, I) if not implemented already.

def generate_random_key():
    """Generate a random 128-bit key."""
    key = [secrets.randbits(8) for _ in range(16)]
    return key

# Example usage:
encryption_key = generate_random_key()
encrypted_image = encrypt_image("D:\Final_SemProject\python_outputs\ex1.png", encryption_key, 8)
